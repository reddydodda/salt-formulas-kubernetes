{%- from "kubernetes/map.jinja" import master with context -%}
{%- from "kubernetes/map.jinja" import full_version -%}
---
apiVersion: v1
kind: Namespace
metadata:
  name: conformance
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: conformance
  namespace: conformance
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: conformance
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: conformance
subjects:
- kind: ServiceAccount
  name: conformance
  namespace: conformance
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: conformance
  namespace: conformance
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: root-conformance-binding
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: Group
    name: system:nodes
    apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: conformance
  namespace: conformance
spec:
{%- if not master.network.get('opencontrail',{}).get('enabled', False) %}
  hostNetwork: true
{%- endif %}
  restartPolicy: Never
  serviceAccountName: conformance
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
{%- if master.network.get('opencontrail',{}).get('enabled', False) %}
          - key: node-role.kubernetes.io/node
{%- else %}
          - key: node-role.kubernetes.io/master
{%- endif %}
            operator: In
            values:
            - "true"
  tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule
  containers:
  - command:
    - /bin/bash
    - -c
    - set -o pipefail && /entrypoint.sh | tee /report/conformance.log
    name: conformance
    imagePullPolicy: Always
    securityContext:
      privileged: true
    env:
    - name: API_SERVER
{%- if master.network.get('opencontrail',{}).get('enabled', False) %}
      value: https://10.254.0.1:443
{%- else %}
      value: http://localhost:8080
{%- endif %}
# Uncomment to use FOCUS for conformance runs
#    - name: FOCUS
#      value: "Conformance"
#    - name: CONCURRENCY
#      value: 25
{%- if master.network.get('opencontrail',{}).get('enabled', False) %}
    - name: K8S_CA
      value: /ssl/ca-kubernetes.crt
    - name: KUBELET_CERT
      value: /ssl/kubelet-client.crt
    - name: KUBELET_KEY
      value: /ssl/kubelet-client.key
{%- else %}
# Needed to use only https secured endpoint
#    - name: K8S_CA
#      value: /ssl/ca-kubernetes.crt
#    - name: KUBELET_CERT
#    value: /ssl/kubelet-client.crt
#    - name: KUBELET_KEY
#    value: /ssl/kubelet-client.key
{%- endif %}
    image: docker-prod-local.artifactory.mirantis.com/mirantis/kubernetes/k8s-conformance:v{{ full_version }}
    volumeMounts:
    - mountPath: /report
      name: output-volume
      mountPropagation: Bidirectional
    - mountPath: /ssl
      name: ssl-auth
      readOnly: true
  volumes:
  - hostPath:
      path: /tmp/conformance
    name: output-volume
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-auth